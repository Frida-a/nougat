{"image": "hw2/05.png", "markdown": "## 4 Programming: Sortedness (15 points)\n\nFollow this https://classroom.github.com/a/K5V7mQ6CGitHub Classroom link to accept the assignment. Your code should be pushed to GitHub; do not include it here.\n\nAfter completing the sortedness test in sortedness.py, complete the following.\n\n* *From test_sortedness.py use generate_array(n, \\(\\epsilon\\)) to create almost-sorted arrays of size \\(n=1,000,000\\).\n* *Values for \\(\\epsilon\\) should vary starting at \\(10^{-1}\\) down to \\(10^{-5}\\) by multiplying with \\(10^{-1/2}\\) every time.\n* *On **each** of the generated arrays run your isEpsilonSorted function 100 times with the **same list** of \\(\\epsilon\\)-values as the one you used to generate the arrays and count how many times it returned sorted.\n* *For each array, plot the probability of isEpsilonSorted returning sorted and the \\(\\epsilon\\)-value you used. The \\(\\epsilon\\)-axis should be in logarithmic scale (use semilogx). What do you observe?\n* *Submit your plots in your GitHub Repository. Make sure that they are added to version control.", "meta": []}
{"image": "hw2/04.png", "markdown": "is ConstRandIsAllZero?\n\n### Boosting for one-sided error\n\nConsider the following algorithm.\n\n[H] Boosted Randomized\n\n``` function BoostRandIsAllZero(bit vector \\(\\alpha=(\\alpha_{1},\\alpha_{2},\\ldots,\\alpha_{n})\\), integer \\(k\\)) for\\(i=1\\)to\\(k\\)do if ConstRandIsAllZero(\\(a\\)) = \"No\" then return \"No\" endif endfor return \"Yes\" ```\n\n1. (f)(1 point) In the **all-zero** (correct output \"Yes\") case, what is the probability of a false negative? Briefly explain.\n2. (g)(1 point) In the **half-zero** (correct output \"No\") case, what is the probability of a false positive? Briefly explain.\n\n### Primality Testing\n\nThe public key cryptographic protocol RSA uses extremely long primes (at least 1024 bits long). As a result, we need to find very large primes efficiently. Fermat's little theorem states that \\(\\forall a\\in\\mathbb{N}^{+}\\ \\forall\\ \\text{primes }p:a^{p-1}\\equiv 1\\pmod{p}\\). In addition, for any composite number \\(q\\), at least half the integers \\(a\\) will be \"witnesses,\" meaning \\(a^{q-1}\\not\\equiv 1\\pmod{q}\\).\n\n[H] Fermat's Primality Test\n\n``` function IsPrime(\\(p\\)) Select \\(a\\in[p-1]\\) if\\(a^{p-1}\\equiv 1\\pmod{p}\\)then return \"Yes\" endif return \"No\" ```\n\n1. (h)(1 point) Between RP-type, coRP-type, and BPP-type, which one describes IsPrime? Why?\n2. (i)(1 point) If \\(p\\) is prime, what is the probability of a false negative? Briefly explain.\n3. (j)(1 point) If \\(p\\) is not prime, what is the probability of a false positive? Briefly explain.\n4. (k)(5 points) Follow this https://colab.research.google.com/drive/1mWG0AQpcnPepu_wEWcskbz3iUH7peY1F?usp=sharingGoogle Colab template link to implement Fermat primality testing and boosting. **Do not attempt to edit the linked file. Create your own copy instead by clicking File \\(\\rightarrow\\) Save a copy in Drive**. You do not need to write anything in your .pdf document for 3(k). When you have completed the notebook, download the .ipynb file. **Important: you must submit this problem separately from .pdf file which contains the rest of your theory solutions. Submit the completed .ipynb file to the Gradescope assignment named HW 2 - Problem 3(k) Notebook.**", "meta": []}
