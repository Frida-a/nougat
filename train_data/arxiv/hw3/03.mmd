Give a **dynamic programming** algorithm that takes as input an array x[1..n] and a positive integer \(k\), and returns the lowest cost of any possible clustering with \(k\) or fewer clusters. The running time should be \(O(n^{3}k)\). Note: \(O(n^{3}k)\) is not necessarily the optimal running time!

1. [(a)]
2. 1.(4 points) Define the subproblem that you will use to solve this problem **precisely**. Define any variables you introduce. What are the dimensions of your dynamic programming table? What is the space complexity?
3. 2.(4 points) Give a recurrence which expresses the solution to each subproblem in terms of smaller subproblems. State any base case(s). Justify your recurrence and state the time complexity of your recurrence.
4. 3.(3 points) Write **pseudocode** for an algorithm to solve this problem. Argue that your algorithm runs in \(O(n^{3}k)\) time.
5. 4.(2 points) Explain in a few sentences how you can improve the running time of your algorithm to \(O(n^{2}k)\). If your previous algorithm already runs in \(O(n^{2}k)\) time, you may leave this part blank for full credit.

## 4 Programming: Document Reconstruction (20 points)

Follow this https://classroom.github.com/a/GGfB4e5sGitHub Classroom link to accept the assignment. Your code should be pushed to GitHub; you do not need to include it here.